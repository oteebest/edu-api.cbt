// <auto-generated />
using System;
using CbtApi.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace CbtApi.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20200426233851_QuestionGroupTopics")]
    partial class QuestionGroupTopics
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("CbtApi.Infrastructure.Entities.Assessment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreateOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Assessments");
                });

            modelBuilder.Entity("CbtApi.Infrastructure.Entities.AssessmentQuestion", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AssessmentId")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreateOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("QuestionId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("AssessmentId", "QuestionId")
                        .IsUnique();

                    b.ToTable("AssessmentQuestions");
                });

            modelBuilder.Entity("CbtApi.Infrastructure.Entities.Option", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreateOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsAnswer")
                        .HasColumnType("boolean");

                    b.Property<string>("QuestionId")
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Options");
                });

            modelBuilder.Entity("CbtApi.Infrastructure.Entities.Question", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreateOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DifficultyLevelId")
                        .HasColumnType("integer");

                    b.Property<string>("GroupId")
                        .HasColumnType("text");

                    b.Property<int>("OptionCount")
                        .HasColumnType("integer");

                    b.Property<int>("QuestionGroupId")
                        .HasColumnType("integer");

                    b.Property<string>("QuestionType")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int>("ScoreValue")
                        .HasColumnType("integer");

                    b.Property<bool>("ShuffleOptions")
                        .HasColumnType("boolean");

                    b.Property<int>("SubjectId")
                        .HasColumnType("integer");

                    b.Property<int>("TopicId")
                        .HasColumnType("integer");

                    b.Property<string>("TopicId1")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("TopicId1");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("CbtApi.Infrastructure.Entities.QuestionGroup", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreateOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("QuestionGroups");
                });

            modelBuilder.Entity("CbtApi.Infrastructure.Entities.Topic", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreateOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("CbtApi.Infrastructure.Entities.AssessmentQuestion", b =>
                {
                    b.HasOne("CbtApi.Infrastructure.Entities.Assessment", "Assessment")
                        .WithMany()
                        .HasForeignKey("AssessmentId");

                    b.HasOne("CbtApi.Infrastructure.Entities.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId");
                });

            modelBuilder.Entity("CbtApi.Infrastructure.Entities.Option", b =>
                {
                    b.HasOne("CbtApi.Infrastructure.Entities.Question", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId");
                });

            modelBuilder.Entity("CbtApi.Infrastructure.Entities.Question", b =>
                {
                    b.HasOne("CbtApi.Infrastructure.Entities.QuestionGroup", "Group")
                        .WithMany("Questions")
                        .HasForeignKey("GroupId");

                    b.HasOne("CbtApi.Infrastructure.Entities.Topic", "Topic")
                        .WithMany("Questions")
                        .HasForeignKey("TopicId1");
                });
#pragma warning restore 612, 618
        }
    }
}
